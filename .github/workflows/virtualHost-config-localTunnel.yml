name: Deploy WordPress with LocalTunnel (Nginx + No Signup)

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'How long to keep the site running (in minutes)'
        required: false
        default: '30'
        type: string

jobs:
  deploy-wordpress:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js for localtunnel
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install -g localtunnel
        npm install -g wait-port
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    
    - name: Build and start WordPress stack
      run: |
        cd docker
        docker-compose up -d --build
        
        # Wait for all services to be healthy
        echo "Waiting for services to start..."
        for i in {1..24}; do
          if docker-compose ps | grep -q "healthy"; then
            echo "Services are starting..."
            sleep 5
          else
            echo "Waiting for health checks... ($i/24)"
            sleep 5
          fi
        done
        
        # Test nginx health check
        echo "Testing nginx health..."
        curl -f http://localhost:8080/nginx-health || echo "Nginx health check failed"
        
        # Test WordPress through nginx
        echo "Testing WordPress through nginx..."
        curl -f http://localhost:8080 || echo "WordPress access test failed"
        
        # Show service status
        echo "=== Service Status ==="
        docker-compose ps
        
        # Show recent logs
        echo "=== Recent Logs ==="
        docker-compose logs --tail=10
    
    - name: Create public tunnel with LocalTunnel
      run: |
        # Generate a unique subdomain
        SUBDOMAIN="wp-$(date +%s)-$(shuf -i 1000-9999 -n 1)"
        
        echo "Starting LocalTunnel with subdomain: $SUBDOMAIN"
        
        # Start localtunnel in background
        lt --port 8080 --subdomain $SUBDOMAIN --local-host localhost > tunnel.log 2>&1 &
        TUNNEL_PID=$!
        
        # Wait for tunnel to establish
        sleep 15
        
        # Get the public IP address (this is the tunnel password)
        PUBLIC_IP=$(curl -s https://api.ipify.org || curl -s https://ipinfo.io/ip || curl -s https://icanhazip.com)
        
        # Get the tunnel URL
        TUNNEL_URL="https://${SUBDOMAIN}.loca.lt"
        
        # Update WordPress configuration with tunnel URL
        cd docker
        echo "Updating WordPress configuration for tunnel URL..."
        
        # Wait a bit more for WordPress to be fully ready
        sleep 10
        
        # Use wp-cli to update WordPress URLs (alternative method)
        docker-compose exec -T wordpress bash -c "
          # Wait for WordPress to be fully installed
          while [ ! -f /var/www/html/wp-config.php ]; do
            echo 'Waiting for WordPress installation...'
            sleep 2
          done
          
          # Install wp-cli if not present
          if ! command -v wp &> /dev/null; then
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            mv wp-cli.phar /usr/local/bin/wp
          fi
          
          # Update WordPress URLs using wp-cli
          cd /var/www/html
          
          # Wait for database to be ready and WordPress to be installed
          for i in {1..30}; do
            if wp core is-installed --allow-root 2>/dev/null; then
              echo 'WordPress is installed, updating URLs...'
              wp option update home '${TUNNEL_URL}' --allow-root
              wp option update siteurl '${TUNNEL_URL}' --allow-root
              echo 'WordPress URLs updated successfully'
              break
            else
              echo 'WordPress not yet installed, waiting... (\$i/30)'
              sleep 2
            fi
          done
        " || echo "WordPress URL update failed - will rely on dynamic configuration"
        
        cd ..
        
        echo "🚀 WordPress is now accessible at:"
        echo "Public URL: $TUNNEL_URL"
        echo "🔑 TUNNEL PASSWORD: $PUBLIC_IP"
        echo ""
        echo "⚠️  IMPORTANT: When you visit the URL, you'll be asked for a tunnel password."
        echo "    Enter this IP address: $PUBLIC_IP"
        echo ""
        echo "🔧 Stack Information:"
        echo "   - Nginx reverse proxy on port 8080"
        echo "   - WordPress backend with Apache"
        echo "   - MySQL database"
        echo "   - Dynamic URL configuration enabled"
        echo ""
        echo "🏥 Health Check: $TUNNEL_URL/nginx-health"
        echo ""
        echo "Site will remain active for ${{ github.event.inputs.duration }} minutes"
        
        # Test the tunnel
        echo "Testing tunnel accessibility..."
        curl -I "$TUNNEL_URL" || echo "Tunnel test completed"
        
        # Show tunnel logs
        echo "=== Tunnel Logs ==="
        cat tunnel.log || echo "No tunnel logs yet"
        
        # Keep everything running
        echo "Keeping the site running for ${{ github.event.inputs.duration }} minutes..."
        DURATION_SECONDS=$(((${{ github.event.inputs.duration }} * 60)))
        
        # Show logs in background
        cd docker
        docker-compose logs -f --tail=20 &
        LOGS_PID=$!
        
        # Wait for specified duration
        sleep $DURATION_SECONDS
        
        # Stop background processes
        kill $LOGS_PID 2>/dev/null || true
        kill $TUNNEL_PID 2>/dev/null || true
        
        echo "Time limit reached. Shutting down..."
    
    - name: Show final status
      if: always()
      run: |
        cd docker
        echo "=== Final Container Status ==="
        docker-compose ps
        echo "=== Recent Nginx Logs ==="
        docker-compose logs nginx --tail=10
        echo "=== Recent WordPress Logs ==="
        docker-compose logs wordpress --tail=10
        echo "=== Tunnel Logs ==="
        cat tunnel.log || echo "No tunnel logs found"
    
    - name: Cleanup
      if: always()
      run: |
        cd docker
        docker-compose down -v
        docker system prune -f
        pkill node || true